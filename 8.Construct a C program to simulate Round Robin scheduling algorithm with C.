#include <stdio.h>
#include <conio.h>

int main() {
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;
    
    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);  // Input total number of processes
    
    y = NOP;  // Remaining processes
    
    // Input arrival time and burst time for each process
    for (i = 0; i < NOP; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &at[i]);
        printf("Burst time: ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i];  // Store burst time for each process
    }

    // Input time quantum
    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &quant);

    // Print table headers
    printf("\nProcess No\tBurst Time\tTAT\tWaiting Time\n");

    // Round-robin scheduling logic
    for (sum = 0, i = 0; y != 0;) {
        if (temp[i] <= quant && temp[i] > 0) {
            sum += temp[i];  // Add burst time to total time
            temp[i] = 0;  // Mark process as completed
            count = 1;  // Process is completed
        } else if (temp[i] > 0) {
            temp[i] -= quant;  // Subtract the time quantum from burst time
            sum += quant;  // Increment total time by time quantum
        }

        if (temp[i] == 0 && count == 1) {
            y--;  // Decrement remaining processes
            printf("Process[%d]\t%d\t\t%d\t\t%d\n", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt += sum - at[i] - bt[i];  // Add waiting time
            tat += sum - at[i];  // Add turnaround time
            count = 0;  // Reset count for next process
        }

        if (i == NOP - 1) {
            i = 0;  // Loop back to the first process
        } else if (at[i + 1] <= sum) {
            i++;  // Move to next process if it's ready to execute
        } else {
            i = 0;  // If no process is ready, go back to the first process
        }
    }

    // Calculate average waiting time and average turnaround time
    avg_wt = wt * 1.0 / NOP;
    avg_tat = tat * 1.0 / NOP;

    // Print average waiting time and average turnaround time
    printf("\nAverage Waiting Time: %f", avg_wt);
    printf("\nAverage Turnaround Time: %f", avg_tat);

    getch();  // Wait for user input (for consoles that support it)
    return 0;
}
